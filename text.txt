
★23.2.1.수
-OJT교육 1일차
 근로계약서 및 인사서류 작성
 회사소개 및 동영상 시청
 직장예절 및 소양교육
 현장투어
-노트북 지급

●
 통근버스 확인
 하드웨어를 이용한 객체지향 구조의 이해 책 공부

◆
 회사 14년, 상장 준비
 YJ- 약진, 링크- 제품 연결
 2009.06 설립, 2017 회사 이전
 대표이사- 박순일
 현재 89명
 매출 해외 94%, 유렵 33%, 아시아 13%, 멕시코 및 미국 40%
 자율복, 와이셔츠, 단정
 직위명+님, 앞존법, 문서에는 존칭생략, 인사
 소개- 부서, 직책, 성명
 명합첩- 보는 방향 고려
 먼저 퇴근시- 먼저 실례하겠습니다, 내일 뵙겠습니다, 먼저 퇴근해도 되겠습니까
 보고- 경청, 기록, 기일 확인
 중간보고- 30%, 순서도 등 내용 완료
 보안

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.2.2.목
-OJT교육 2일차
 취업규칙 및 인사규정 설명
 안전보건 교육
 성희롱 및 직장 내 괴롭힘 교육
 그룹웨어 사용 교육
 전결규정, 문서작성 교육

●
 전사메일로 입사인사
 이메일, 상여금, 근무시간, 야근수당, 출장비, 기숙사 운영- 2층 난방, 이면지, 근무확인서, 그룹웨어- 사진등록, 전화번호, 자기소개

◆
 회사가 조립 위주라 깔끔함
 책임, 선임, 주임, 일반
 육아휴직, 병가휴직- 무급, 근속연수 포함x, 진단서 필요
 연차- 15개, 안 쓰면 돈, 2년마다 +1, 최대 25개
 조퇴, 외출은 0.25개 차감
 근로자의 날(5.1) 쉼
 주말에 일하면 평일 대체 가능, 안 쓰면 수당 5만원
 경조사 휴가, 부모님 칠순 하루 등- 유급, 1달 안에 신청
 육아기 근로시간 단축
 월급날 25일, 생일 상품권 3만원
 경조사금 신청
 퇴직금- 1년에 1달 증가
 대명콘도 사용 가능
 기숙사 운영- 2층 사용, 이면지, 근무확인서
 보고, 연락, 상담
 액션
 성과금은 인사평가 기준
 회식- 2,3달에 1번
 그룹웨어- ytcho, @w~1
 메일 쓰기(주소록, 조직도, 사용자/그룹)
 메일용량 다 차면 요청(웍스로)
 전자결재+ 새 결제 진행+ 근태신청+ 결재정보+ 최종승인에 본부장님, 검토에 팀장님+ 개인사유(병원 내원)+ 결재 요청
 출장시 100km당 1,2만원, 일비
 개인카드 사용 후 영수증과 함께 신청
 각 부서 막내가 연장근무 신청
 기안- 사업 신청 승인 요청, 품의- 돈 신청
 팀장님 선에서 10만원 미만 가능, 본부장님 100만원, 회장님 100만원 이상 전결권한, 금액 관계 없으면 재무팀 제외 가능
 회의록 작성 후 참고 걸어 올리기
 기안 및 품의서에 명확한 계좌와 금액을 적을 수 있다면 그냥 적고, 미정일 경우 추후 자금집행신청서 작성, 관련문서 링크
 직위- 부차과대, 직책- 본부장, 팀장
 사무용품신청서- 없으면 그냥 올리고, 있으면 경관 가기
 코드는 오피스디토 참고, 회원가, 없으면 결재요청 및 첨부파일로 링크 및 스샷 첨부
 마우스, 키보드는 사무용품, 컴퓨터, 모니터는 전산
 gw.yjlink.com

수신 : 김하나 사원 / 와이제이링크
발신 : 조영탁 연구원

안녕하십니까.
와이제이링크 S/W 개발팀 조영탁 연구원입니다.

내용

감사합니다.
조영탁 연구원 드림.

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.2.3.금
-OJT교육 3일차
 ERP 교육, 전사 프로세스 설명
 장비 교육

●
 노트북 설정 9개
 사무용품, 출퇴근 찍기, 전사, 노블룩스(새로운 빛), 홍보영상 툴, 전용기 장비, 명함, 인터넷, 전화번호 저장, 사규, 조직도, 연락망

◆
 ERP- 영림원 소프트랩, 운영, 기본, 인사, 급여, 회계, 영업, 물류, 생산, 품질, 구매, 원가, 초기입력, ESS, 구매SCM, IFRS, 경영자, 연말정산, 추가개발
 설치 SVR주소: http://121.66.89.150:8080
 아이디: 개인 사번
 ERP(엔터프라이즈 리소스 플라이밍)- 전사(회사 전체) 관리 감독
 프로세스- 수주, 사양협의(날짜 및 성능), 견적, 신규품목 등록, 수주 및 수출 입력, 출하 및 생산의뢰, 거래명세서 등록, 신고필증 및 매출 등록, 전표분개 및 제출, 출고
 사양번호- 2301-0001-01, 년월-번호-장비, 번호1000부터는 유상, 3000부터는 무상
 생산의뢰+ 기구설계+ 전장설계(PLC)+ 연구소+ 구매 및 가공+ 조립(기구 및 전장)+ 프로그램 조정+ 출하
 SMT- PCB(보드) 생산 공정, 표면 실장 기술
 IMT- 삽입 실장기술
 PCBA- 부품이 장착된 보드
 PCB 투입+ 바코드 각인+ 솔더 크림 도포+ 부품 장착+ 납땜+ PCB 배출
 로더- PCB 전달, 스크린 프린터- 납 도포, SPI- 납 도포상태 검사, 마운터- 부품을 표면에 실장, 솔더링- 납땜, AOI- 부품 실장상태 검사, ICT- 회로 검사, 작업자가 직접 검사, 언로더- PCBA를 매거진렉에 보관
 SMT 공정설비- 매거진 로더+ 배큠 로더+ 레이저 마킹기+ PCB 클리너(스크린 프린터)+ SPI+ 리젝트 컨베이어+ 셔틀 컨베이어+ 칩 마운터+ 이형 마운터+ 게이트 컨베이어+ 오븐+ 쿨링 버퍼+ AOI+ AOI NG 버퍼+ 매거진 언로더
 공정 프로세스- 영업, 사양협의, 기구설계, 생산, 전장설계, 프로그래밍, 조립, 출하
 YCI- AOI NG 버퍼 대신 카메라를 통해 여러개를 동시에 작업자가 NG 판단 가능
 네트워크- YJ-Lab, yjlab01*
 \\192.168.0.150- lab2, 0208lab**
 깃- admin, lab0208**

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.2.6.월
-SW OJT교육 1일차
 개발환경 구성
 안전 및 주의사항 교육
-관심 캘린더 추가
-아웃룩 POP3 설정
-게시판 및 자료실 공부

●
 게시판 및 자료실 공부, git 공부, 책 공부

◆
 연차- 근태신청서, 종류, 기간, 시간, 연차일수 4가지, 개인사유, 결재정보- 최종승인에 책임님, 참조에 상무님, 결재요청, 캘린더에 [근태]연차
 회의실 예약, 날짜, 시간, 목적 등 전부 기입
 메일 다 차면 비우기
 매주 수요일 퇴근 전까지 주간보고
 회사 정문 도어키- 1723

컨*insert // 복사
시*insert // 붙여넣기

git config --global user.name "Pigeon2222"
git config --global user.email "ascv131@naver.com"
git init
git remote add origin https://github.com/Pigeon2222/YJ.git
git remote -v
github main > master 이름 변경
git config --global core.autocrlf true

git pull origin master

git add .
git commit -m "230101 0000"
git push -u origin master

-최근 n개의 커밋 제거
git reset HEAD~n

-깃 고장시 강제 풀, 수정내용은 반드시 사전에 백업
git fetch --all
git reset --hard origin/master

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.2.7.화
-SW OJT교육 2일차
 장비 구성요소 및 동작교육
 TCP/IP 서버 및 클라이언트 통신 프로그램 구현

●
 TCP/IP 통신 프로그램 계획서 작성

◆
 분야- 장비제어(GUI, 시퀀스(장비동작)) MES
 센서로 감지하고, 프로그램으로 사고하고, 모터로 움직인다
 모든 프로그램은 기준과 데이터 필요
 전기신호는 0과 1
 센서는 빛의 반사로 감지하며, 확인되면 노란불
 IO통신- 인풋, 아웃풋, 아날로그
 DIO통신- 디지털 IO통신
 IO보드- 인풋과 아웃풋이 우리 회사 기준 16개씩 있음, 센서가 많을 수록 많아짐
 PC는 UDP통신으로 IO보드 계속 체크
 PC가 모션보드, 드라이브를 통해 모터에게 지시
 PC제어 프로그램- 머신설정, 모델설정(모델별 1개씩)
 PLC- 특수 목적만 사용 가능한 전용 PC
 레이저 마킹기- 센서+ 모터+ 레이저+ 마킹+ 카메라+ 스캐너
 라우터- 센서+ 모터+ 스핀들+ 카메라+ 스캐너

자료공유
-TCP, UDP 개념
-개발일정 (개념, 설계(변수명,함수(매개변수, 반환값), 구현)
-개발내용

UI
-서버 클라이언트 중 1
-ip주소, 포트번호, 타임아웃 시간 등 연결에 필요한 정보 설정 화면
-실시간 통신 연결상태 표시
-제어문자 입력방법(아스키코드표 확인)
-송수신 데이터 누적표시
-자동 회신 기능 설정화면(설정된 메시지가 수신되었을 때 응답메시지 송신

TCP
-서버
-클라이언트

 조영탁_TCP/IP 서버 및 클라이언트 통신 프로그램 구현 계획서

 개념 및 목표
클라이언트, 서버 각각의 프로젝트를 만들고 TCP/IP 통신을 성공한다.

 UI 설계
1. 서버와 클라이언트를 선택할 버튼 2개 생성
2. IP주소, 포트번호, 시간 표시를 위한 텍스트박스 2개, 라벨, 타이머 생성
3. 연결상태를 표시할 라벨 생성
4. 데이터를 전송할 텍스트박스 생성
5. 송수신 데이터를 표시할 리스트박스 2개 생성
6. 자동 회신 기능을 위한 화면, 텍스트박스 2개, 버튼 생성

 기능 설계
1. TCP/IP 통신을 위한 IP주소와 포트번호를 텍스트창에 입력하고 서버 및 클라이언트 버튼을 누르면 TCP/IP 통신 시작
   string : ip_text, port_text     변수타입 : 변수명
   Sever_start(null) // null     함수명(매개변수) // 반환값
   Cli_start(null) // null
2. 연결이 성공되면 연결상태라벨 최신화 및 타이머 시작, 타이머 1초마다 경과시간이 타이머라벨에 최신화
   string : connect_label, timer_label
3. 연결이 끊기면 연결상태라벨 최신화
   int connect_num = 1 // 비연결시에는 -1
   Connect(int connect)
4. 제어문자 입력 가능하게 설계 (아스키코드 제어문자를 ‘문자’로 입력 시 정규표현식으로 전환 시도)
   string : send_text
   Control_cha(string send_text) // string send_text
5. 송수신 데이터는 리스트박스에 출력
   string : send_text, get_text
6. 자동회신 기능으로 설정된 메시지가 수신되었을 때 설정된 응답메시지 송신 (autoMSG_save에 저장된 메시지 수신시 자동으로 송신)
   string : autoMSG_save, autoMSG_send

 고려 및 보완 필요사항
1. 제어문자 입력 가능 방법 모색
2. TCP 통신 중 연결이 끊길 때 에러 발생 막기
3. 자동회신기능을 리스트 형식으로 만들어 여러 개의 자동회신메시지를 추가 삭제 가능하게 고려

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.2.8.수
-SW OJT교육 3일차
 TCP/IP 서버 및 클라이언트 통신 프로그램 구현
 키엔스 측정기 및 레이저 마킹기 사용법

●
 USB 준비

◆
 측정설정+ 신규설정+ 건너띄기+ 대상옮기기+ 모드(고정도, 광시야)+ AF(오토포커스)+ xy이동+ 자동+ 요소툴+ 확정(다음)+ 적용+ 확인+ 기본측정+ 측정실행+ 등록+ 예+ 설정저장
 배신호과장님께 장비 사용가능여부 확인+ D드라이브+ 마커폴더 복사 후 원본 이름 변경+ 레시피+ MPL파일 2개 넣기+ 세팅+ 디폴트 텍스트로 열기+ 피드셜 옵션 posmar와 refer 2개 true로 변경+ 로딩클램프 true로 추가+ 레이저파일 2개(exe, pdb) 복사 붙여넣기+ 레이저마커 dot파일 열어 8번에 넣기+ 레이저마커 실행+ ok+ 로그인+ 모델+ 피드셜+ 1시방향 기울기 있는거 확인+ 클램프디스턴스에 0.4 입력 저장+ 클램프 클릭 후 움직이는거 확인
 연속측정+ 파일읽기+ 기울여놓기+ 노랑네모 맞추기+ xy이동+ 실행+ 넘버링 및 원 일치 확인(인식 틀리면 메인+ 프리뷰+ 패턴서치+ 확인+ 저장+ 연속측정+ 고정외각)+ 메인+ 통계해석+ 파일선택+ 데이터 수 입력+ 추출실행+ 데이터일람+ 11시모서리 눌러 전체선택+ 데이터일람저장+ 평행수직값 확인+ 옵션설정+ 익스포트+ 파일선택+ usb위치설정+ 저장+ 닫기
 usb 엑셀값 계산시트에 붙여넣기+ 마이너스에 붙여넣기+ x,y값 기록+ 보정 이후가 오른쪽값보다 크게 조정+ 아크코사인 평균값 기록
 레이저마킹기 초기화+ x,y값 입력+ 보정 및 레이저 체크+ 마킹+ 가이드+ 집징기 연결+ 필름 바꾸고 보드 넣기+ 끝나면 스탑+ 30마이크로 미만인데 정중앙 아니면 평행이동
 이니셜라이즈+ 소리 끄기+ 컨티뉴+ 0.4+ 스메마 풀기+ 보드 뺄 때(스탑+ 플립포스) 위급시 이머전시
 타임아웃+ 로그인+ 필름 다시 붙이기+ 점 선택+ 가이드
 끝나면 마커 원상복구

불필요하여 사용안함
   string : ip_text, port_text
   string : send_text, get_text
   string : connect_label, timer_label

계획 수정사항
   Sever_start() -> connectServer() // 함수명 변경
   Cli_start() -> connectClient() // 함수명 변경

   int connect_num = 1 // 비연결시에는 -1
   Connect(int connect)

   string : send_text
   Control_cha(string send_text) // string send_text

완료
 연결시 글자 및 색 변경
 메시지 엔터안됨
 메시지 본인 발신창에 안뜸
 메시지 보내면 초기화
 서버, 클라 확인
 발신, 수신창
 자동회신 기능

예정
 제어문자 입력
 타임아웃
 클래스화
 종료시 에러막기
 종료시 글자 및 색 변경

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.2.9.목
-SW OJT교육 4일차
 TCP/IP 서버 및 클라이언트 통신 프로그램 구현

●
완료
 타임아웃
 종료시 에러막기
 종료시 글자 및 색 변경

예정
 제어문자 입력
 클래스화

◆
 키엔스 측정기 목표 및 추출값- 의도한 위치에 정확히 마킹하기 위한 계산식 도출, 기울기(x,y,z), 평행이동(x,y)

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.2.10.금
-SW OJT교육 5일차
 TCP/IP 서버 및 클라이언트 통신 프로그램 구현

●
완료
 제어문자 입력
 중지 후 재연결

예정
 디버깅
 클래스화

◆

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.2.13.월
-SW OJT교육 6일차
 TCP/IP 서버 및 클라이언트 통신 프로그램 구현

●
완료
 클래스화
 제어문자 추가 출력

예정
 디버깅

◆

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.2.14.화
-SW OJT교육 7일차
 TCP/IP 서버 및 클라이언트 통신 프로그램 구현
 발표 참관

●
예정
 서버는 끊기면 안됨
 제대로 못 받음, 연결이 끊기면 몰아서 받음
 제어문자 못 날림
 디버깅
 ppt

◆

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.2.15.수
-SW OJT교육 8일차
 TCP/IP 서버 및 클라이언트 통신 프로그램 구현

●
완료
 디버깅
 제대로 못 받음, 연결이 끊기면 몰아서 받음
 서버는 끊기면 안됨
 제어문자 못 날림
 수신시 버퍼가 남아서 이전꺼도 받음
 수신창 줄띄움
 자동회신 안됨
 ppt(순서도, 다이어그램, 코드)

◆

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.2.16.목
-SW OJT교육 9일차
TCP/IP 서버 및 클라이언트 통신 프로그램 구현
발표

●
TCP 및 레이저 마킹기 발표
권용인 주임님께 YWC-1X00(435 검사기) IO맵 받음
노트북키 8개 문제 팀장님께 보고

◆
 발표 피드백
함수명 및 변수명 보면 이해 되게 잘 짜기
주석은 함수 위에 쭉 적고 정말 복잡한 부분만 추가 기재
{}생략 안하기
오타 조심
직접 만드는 것보다 좋은 코드를 찾고 왜 그렇게 썼는가 공부

바이트를 여러 방식으로 표현한게 정수, 문자, 문자열 등
클래스 나누는 장점 고려하여 분리하기
스태틱은 메모리 공유시에만 사용

질문에 맞는 답만 작성, 다른 내용 안 필요함
ppt 장수 적게 중요한 내용(고민, 자랑)만 작성
모르는 내용 적지 말기
순서도는 단순하게, 중요한 내용만 (관리 및 입출력)
다이어그램 의도에 맞게 잘 계획하기

 피드백 조치
-떨어지지 않는 자료구조 찾기 : 딕셔너리
https://engineer-mole.tistory.com/174
var myTable = new Dictionary<string, string>(); // 딕셔너리 선언
myTable.Add("a", "b"); // 추가
foreach(string Key in myTable.Keys) {Console.WriteLine(Key);} // 키 찾기
foreach(string Value in myTable.Values) {Console.WriteLine(Value);} // 값 찾기
foreach(KeyValuePair<string, string> item in myTable) {Console.WriteLine("[{0}:{1}]", item.Key, item.Value);} // 둘 다 찾기
string str = "a"; // 키로 값 찾기
Console.WriteLine("[{0}:{1}]", str, myTable[str]);
-tcp가 느린 이유 // 답을 받기 전까지 데이터를 준비시키고 기다리기에 지연이 발생, 과정이 추가되기에 느림
-tcp는 1:n통신 되는가 // 가능은 함
-크로스스레드 문제 // 윈폼 컨트롤을 생성한 스레드가 아닌 다른 스레드가 속성을 바꿀 때 발생, 인보크로 해결하거나 개체를 생성하지 않고 기존 개체를 활용하여 해결

 IO맵의 아웃풋으로 지시하고 인풋으로 답 받음

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.2.17.금
-UDP 1일차
-모니터 지급

●
변상필 대리님께 나와 권용인 주임님 사물함 양식 부탁
상무님께 장비 보고 YWC-1X00(435 리젝트 다음 검사기)
기숙사 신청

◆
모터2개, 센서3개(인, 아웃, 스탑), 스미마, ?
CDIO 클래스 3개(인, 아웃, 스탑) 모터(무브, 스탑)
전부 합쳐 구성한게 c컨베이어
모터1개, 모터 가져올 수 있는 인덱스
DIO에 접점 정보주기

소프트웨어는 재사용이 핵심
하드코딩하고 하드코딩한 정보가 파일에 있으면 됨
접점정보는 외부에 적어 파일로 넣고 뺼 수 있게

ppt(진행현황, 피드백조치)
랜선 위치는 에어컨 인근
매주 금요일 11시에 팀 회의
장비IO맵, 통신준비, UDP통신(뮤토콜), 송수신, 모터 제어, 개별IO컨트롤
시뮬레이터 활용(이더넷 IP주소)

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.2.20.월
-UDP 2일차
-기숙사 확인

●

◆
ppt(진행현황, 피드백조치)
-다이어그램 및 클래스
-폼 객체 사용
--Server_connect(this)
public void Server_connect(Form1 form)
public Form1 form1;
form1 = form;
form1.IP_box.Text
-크로스 스레드 에러 방지 추가
form1.Connect_text.BeginInvoke((MethodInvoker)delegate { form1.Connect_text.Text = text; });
인보크 // 동기식, 이벤트가 일어나는 도중 호출
비긴인보크 // 비동기식, 이벤트가 끝나고 호출, 추천
-tcp가 느린 이유 // 답을 받기 전까지 데이터를 준비시키고 기다리기에 지연이 발생, 과정이 추가되기에 느림
-tcp는 1:n통신 되는가 // 가능은 함
-딕셔너리
복수접점 // 16진수를 순서 정리 및 2진수로 변환
기숙사 // 0906, 난방 상시, 정리정돈

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.2.21.화
-UDP 3일차
-발표

●
 인터널1(폭조절) 인터널2(컨베이어)
 이멀전시나 에러 후 에러 푸는 순서
-폭조절 생성 // R50D 0, R50E 1, R50F 1
-컨베이어 생성 // R512 0, R513 0, R514 0
-인풋 R10C 0, R10D 0 // 생략
-공통 에러 클리어 // R580 1, SLEEP, R580 0
-서보 온 // R507 1, R527 1
-그래도 폭 조절 안되면 plc 문제, 접점 빠르게 킬 준비, plc팀에 문의

◆
 ppt
-ppt 최대 18줄 나오게 글자 사이즈 조정하고 내용 꽉차게
-ppt는 발표용, word에 상세내용
-장비개발 n주차
-개발일정 표현

 공통
-상태전이도 작성(어떤 이벤트에 발생하는가)
-무조건 스테이트 패턴 사용(모든 상태가 특정 행동에 대처방안 있어야함)
-스태틱 금지
-제어적인 관점에서 생각하기
-장비가 검사가 안되는 상태이지만 검사 기능은 구현하기
-컨트롤을 왜 넘겨야할까
-파일명규칙

 발표 피드백
-커먼 이름도 안좋고 있는게 좋지 않음
-용어는 영어로 작성
-윈폼 컨트롤을 관리하는건 폼에서 하기
-클래스 다이어그램 만들고, 맞는지 확인 받고, 방법 묻기
-기본적으로 비긴인보크(병렬), 리턴값이 필요하라때만 인보크
-떨어지지 않는 자료구조는 딕셔너리
-var와 다이나믹이 다른가? (var는 컴파일 시점에서 타입을 추정하여 확정하지만, dynamic은 런타임시에 타입을 확정하므로 컴파일 때 오류를 찾지 못함)

 박대녕 연구원님 발표

 박도영 연구원님 발표
-다른 자료형에 넣고 불러오기(복수접점을 담은 리스트, 리스트뷰에 넣는 함수)
-메인폼에 데이터 불러오기, 초기화 있어야함
-타이머 주기마다 업데이트
-로그 찍을 클래스에 이벤트 및 델리게이트 선언
-보드 사이즈만 넣으면 알아서 작동하게 설계
-통신 문제는 락으로 묶어서 해결, 그래도 안되면 멀티스레드 문제
-빅에디안, 리틀에디안 나뉘는 이유는 아키텍쳐가 달라서 그럼,데이터전송구조가 다름, 걔들이 그렇게 짰음, pc는 리틀에디안 통일인데, 장비는 다를 수 있으니 확인 필요, 비트 컨버팅을 어떻게 하는게 좋을까가 진짜 문제
-깜빡임 막는게 더블버퍼가 답이 아님
-홈 위치가 왜 0,0인가? 음수 마음에 안듬
-실린더 왜 쓰는가, 왜 단동, 복동 종류가 여러개인가? 정밀제어가 무엇인가?
-클리너+ 내려와서 안정화 되면 스미마+ 완료+ 스미마 나감+ 클리너 꺼야함(전기 많이 나감)

 이형우 인턴님 발표
-폭 조절 기능, 자동 동작, 수동동작(자동동작을 링크)
-홈 센서 인지로 폭 조절, 천천히 이동하여 초기화, 초기화 완료되면 길이 재서 초기화값 정함
-xml에 장비 폭 넓이 등 값 넣기
-버튼 여러개를 그룹박스에 넣고 클릭 막기
-간단한 스레드시에는 스레드풀보다 타스크 사용
-case에는 enum 무조건 사용
-타이머보다 정밀함이 필요하다면 datetime 사용
-MS는 리얼타임이 아니어서 시간오차 있을 수 있음
-겟 프로퍼티 방식으로 bool 배열 은닉성 높임
-데이터 주고 받는건 통신시간이 관건이니 신경쓰지만 메모리는 여유가 있음
-다른 장비에 다 활용 가능하게 코드 작성
-모델 디펜던트 파라미터(모델정보)는 작업자가 설정할 수 있게
-머신 디펜던트 파라미터는 개발자용, 작업자용, GUI
-한 함수가 한 화면에 보이게 작성
-함수는 함수명에 맞는 동작만 하게 작성
-홈 크기 측정시간은 단 1번만 실시하기에 오래 걸려도 되지만 최대한 정확하게
-홈 명령은 홈 센서 닿는 순간 마이크로 단위로 파악, 밀려도 시간 계산해서 고려
-홈 크기는 다 다르기에 보드 크기 맞추고 캘리브레이션 명령하면 홈 크기 측정
-xml 구조는 비주얼 스튜디오 xml 참고
-시리얼 라이즈 함수 사용시 자동으로 xml 생성
-장비 돌아가면 돌아간다고 자랑하기, 찾아오기 전에 찾아가서 자랑하기, 그래야 진급함

 김준희 연구원님 발표
-UI 외에는 모두 스레드로 대체
-폭 조절 0.1mm를 위해 노력할 필요 없다, 우리 장비는 안 중요하다
-최대 범위 밖이면 안 움직이게 항상 리미트 체크
-폭 조절, 보드 사이즈 선택, 보드 사이즈 저장, 보드 사이즈 삭제 기능
-문제가 발생하면 다시 발생하지 않게 코드 작성
-과제를 받으면 의도를 묻고 미리 움직여라

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.2.22.수
-UDP 4일차
-레이저장비 교육(배신호과장님)

●
 간단한 시퀀스 구현(가동 및 정지)

◆
 클래스는 온전해야함, 클래스=장비(객체), 인터페이스=기능
 XML에 시리얼라이즈(직렬화), 파싱, 어레이, 뺄 때는 역직렬화, 링큐는 sql문법 차용, 스레드마다 소켓을 다르게 하면 통신 버벅임 줄어들 수도 있음

 레이저 장비 교육
-1. 전원 끄고 5초후 켜기(잔류전력)+ pc켜기+ 레이저 마크 실행+ 로그인+ 메인터넌스+ 로그인+ 인슬라이즈(초기화)+ pcb있는지 확인알림+ 헤더가 부딪히는지 확인알림, pc옆은 레이저 컨트롤러, pc가 레이저 컨트롤러에게 지시
-2. 형광등은 전원 위에 검정 스위치
-3. 경광등 나사 있고 잘 들어가는가
-4. 비상정지 후 레이저 컨트롤러 빨간 불, 비상정지 회전시 초록됨, 평소에는 헤더 초록불, 레이저 컨트롤러 초록불 3개
-5. 비상정지 후 손으로 잘 움직이는가, 잘 안 움직이면 수평 아님
-6. 바람 나오는 팬은 장비 오른편
-7. 손으로 헤드 움직였을 때 걸리는 거 없어야함, 파워메터 조심
-8. 손으로 센서 움직여서 움직이는지 확인, 리미터 센서 앞뒤는 y, 좌우는 x
-9. 듀얼 장비 아니면 확인 안함
-10. 11. 파나소닉만 확인, 현재는 주로 키엔스

-12. D드라이브+ 마커+ 세팅+ 디폴트머신2+ Edit+ <GradeUse>true를 false로 변경, 저장 후 프로그램 껐다 켜기, 옵션이라 추가 비용 사항, 헤더 아래 노란 박스가 스캐너
-13. D드라이브+ 마커+ 세팅+ 디폴트머신2+ Edit+ <Company>회사명 바뀐거 확인
-14. 장비 뒤편 서버 5개(X, Y, W, F, R) USB 4번째 플리퍼에 꼽고 노트북 연결+ 하나텀 실행+ 확인+ 매개변수+ 확인+ 5.6은 5번에 6번, 프론트 리어
-15. 머신+ 유저+ 좌상단 클릭(3번, 3번, 1번)+ lab0208+ 엔터+ 동작범위 확인+ 플립 앞뒤 F/W가 513 확인, 아니라면 업데이트+ 닫기+ EXIT(설정 초기화되서 바로 꺼야함)
-16. 우레탄이 모터 XY로 2개씩 4개 달려있는거 확인
-17. 스캐너 위치+ 머신+ 포지션+ 플리퍼 센서에 안 닿게
-18. 카메라 위는 초점, 아래는 조리개, 나사 꽉 조이기
-19. 네트워크+ 이더넷+ 네트워크+ 체인지어뎁터+ pc+ tcp/ip+ ip(-.-.10.100) 확인+ 서브넷(255.255.255.0) 바꾸기, 카메라(tcp/ip)+ ip(-.-.20.101) 확인+ 서브넷(255.255.255.0) 바꾸기
-20. 홈+ 어바웃+ 메모리 8GB 확인

-21. 방화벽+ 네트워크+ 윈도우 파이어월+ 다 끄기(업데이트 하면 안됨)
-22. 얼로우 언 뜨로우 파이어월+ 체인지 세팅+ 어노더+ 레이저 마커.exe 추가+ 해당 내용 2개 체크
-23. 인트로+ 파워+ 슬립+ 체인지+ 체인지+ USB세팅+ USB+ 디스에이블+ PCI익스페스(off)
-24. D드라이브에 메뉴얼 2개, 마커, 셋업 폴더 확인
-25. 나비는 파나소닉만, 마커폴더+ 인시던트+ 폴더 안 삭제
-26. D드라이브+ 마커+ 레시피+ 어깅 레시피, 디폴트호넬 2개 외에 삭제, 마킹빌더3+ 트랜스퍼 위에 4개 확인
-27. 28. 커넥션+ ML에 체크(29610), 레이저 마커+ 유닛 셋업+ 커뮤니케이션 셋업+ ip 확인, 베이직 세팅+ 2+ 4mm, 파일 오퍼레이션에서 템플릿 조정 및 삭제 가능
-29. 팀 트랜스퍼 선택해서 위에 4개 다 헤드 아래로
-30. 마킹빌더3 실행+ 파일+ 버전+ 코드, ID, 키 백업

-31. 윈도우 영어로, 마커 사용 끝나고 항상 영어로
-32. 로그 폴더가 마커+ 로그에 있는지 확인, 머신+ 유저+ 마커, 로그 확인
-33. 전부 D드라이브에 위치
-34. 카메라+ 속성+ 컨퓨레이션+ 어드벤선+ 인터넷(익스패더)+ 점보(9014)+ 트랜스모니퍼(2048), 통신속도는 램카드 따라 다름
-35. 스캐너 설정(192.168.10.85, 23, 12321, 2500), 마커+ 세팅+ 디폴터머신2+ <스캐너>에서도 변경 가능
-36. 머신+ 유저+ lan+ 레이저+ 타임아웃 2000 확인
-37. 모델+ 마킹+ 오프셋+ 스캔시 노리더면 연결 된 것
-38. 레이저 파워 측정은 옵션사항, 파워메터 있고 항목 있는지 확인, Edit+ power+ true, pos 누르기 전 이멀전시에 손대기, 레이저 파워 체크하면 주황색, 파나소닉은 10와트, 키엔스는 30와트, 32~37와트가 정상, 30이하면 문제, 플립할 때 서버 끄고 손으로 뒤집기
-39. led pc는 흰색이면 단색, 검정색이면 3색, 3색은 10대 중 1대쯤 팔림
-40. 에어 오프 설치시만 확인

-41. 모델 추가+ new+ 더블클릭하거나 셀렉트+ ok+ 바꾸고 save+ width 하면 폭 자동 조정, 센터 센서(28번) 불 들어오면 강도 조절
-42. 메뉴얼+ 컨베이어+ 클램프 체크 해제+ 포워드, 리버스 소음 확인
-43. 헤더 손으로 확인, 포지션+ 지그 이동+ 소음 확인, 모터+ 모터에 1이면 리미트, -는 왼쪽, +는 오른쪽, 모터+ 로그시 왼쪽 아니면 모터 거꾸로 달린 것
-44. 머신+ IO+ 아웃(22,23)+ 인(8,9) 불 확인
-45. 메뉴얼+ 플립+ 클램프 후 수평지그로 레일 단차 확인
-46. pcb 2장 로딩, 언로딩 이격에 대고 단차 확인
-47. pcb 중앙에 넣고 0, 180도 플립에서 0.1mm 이격
-48. 최소, 최대로 지그 이동
-49. 최소, 최대로 플립, 클램프
-50. 큰 보드 넣어서 구동 확인

-51. 플립 누르기
-52. 스메마 인은 앞 장비, 아웃은 뒷 장비 연결, 메뉴얼+ 스메마 체크+ 머신+ 포지션+ 듀얼 포인트로 마킹+ 카메라 범위 넘어가는지 확인
-53. 빠르게 느리게 움직이면서 소음 확인
-54. 인버트 안되는 모델은 좌우로 잡음, 30대에 1대
-55. 스메마 끄고 로딩+ 머신+ 센터 포스+ 정중앙 맞추고 포지션 저장+ 듀얼 포인트 찍고 카메라와 빛 정중앙 아니면 비전에서 오프셋으로 조정+ 세이브+ 많이 안 맞으면 나사 풀어서 손으로 대충 조정 후 꽉 조이고 오프셋으로 미세조정+ 보드 넣고 플립으로 돌려서 체크
-56. 57. 나비 없음, 모델+ 키마크+ pcb 맞는지 확인+ 무브 투 마크+ 특정 범위 드래그+ 셋 레진+ 민트색 확인+ 파인드 마크+ 연두색 확인+ save+ 무브 투 마크 누르면 저장한 곳으로 이동+ 맥 모델 이머지하면 다 체크+ save+ 피듀셜+ 위치 보정+ 레프트탑+ 무브+ 드래그+ 첫번째+ 셋+ FIND(십자가 정확히 맞추기, 음영으로 체크함)+ 카메라 정중앙+ 셋+ FIND+ 무브+ 셋+ FIND+ save+ 큰 파인드로 테스트+ 바팅 동일, 드래그+ 셋+ FIND+ 무브+ 탑+ 파인드+ 마킹+ 피듀셜 찾고 레이저 컨트롤(COMPEN) 체크+ 근처로 이동+ 가이드+ 세이브포지션 클릭+ 옵션 옆 본사이드로 뒷면 변경+ 점 선택+ 이동+ 가이드+ 스댑+ 세이브포지션+ 무브하면 이동, 리스트 선택+ poewr(30), 스피드(500)이 기본+ 마킹(출력 낮거나 스피드 빠르면 잘 안됨), 오프셋+ 스캔(등급 나옴), 스캐너 프로그램+ 오프 다음 이미지(1번)+ 라이브+ 파랑네모 범위 조정(범위 너무 안 크게), 레이저 프로그램+ 트랜스퍼로 불러오기+ 마킹+ 가이드+ 레이저(컨티뉴)+ 트리거로 확인+ 마킹레이저+ 트리거로 씀(컨트롤로 확대) 레이저 프로그램에서 로그, 2D(QR, 바코드), 사이즈, 코드순서 설정 가능, 마킹에서 레이저(파일네임) 선택 후 추가로 타입, 변수, ADD하면 정보 추가 입력, 숫자 영문에 따라 입력 가능 자리수 다름
-58. IO+ 2번이 집징시, 마킹+ 석션이 집징기, 오토는 자동으로 집징기 가동
-59. 실습x, type-idx500이 25인지 확인

-67. 보드에 테이프로 이물질 붙여서 체크
-68. 모델+ 언로드 플립 체크하면 뒤집어서 나감
-69. 이오나이저는 소리 및 연기 남
-70. 실습x, 레이저 프로그램에서 마킹 선택 중이면 pc로 제어 불가

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.2.23.목
-UDP 5일차

●
 IO맵 구현

◆

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.2.24.금
-UDP 6일차

●
 카톡, 공정ppt 해결
 상수화

◆
 깃
-대용량 파일 관리 커밋
git lfs install
git lfs track “*.zip”
git commit -m “Large file included”
-최근 n개의 커밋 제거
git reset HEAD~n
-깃 고장시 강제 풀, 수정내용은 반드시 사전에 백업
git fetch --all
git reset --hard origin/master

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.2.27.월
-UDP 7일차
-대표님 간담회(신입 9명)

●
 컨베이어 생성자에서 선언
 컨베이어에서 폭과 에러 빼고 각각의 클래스에 넣기
 에러클리어 버튼 비활성화 빼기
 IO맵 더블클릭으로 접점 켜고 끄기
 생성자 매개변수로 객체 생성

◆
 대표님 간담회- 질문 문자로 언제든지 해라

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.2.28.화
-UDP 8일차
-발표

●
 IO맵 최신화

◆
 발표 피드백
-진행현황에 GUI 및 화면, 메뉴얼 동작 추가, 언제까지 할건지, 해낸 날짜 적기
-커넥트를 샌드로 이름 변경
-UDP 하드코딩 줄이기
-UDP 객체 만들지 말고 락 사용(멀티스레드 문제 발생 막기)
-컨베이어 객체에는 접점정보, 센서, 작동 4개만 있음
-세부 객체 안에 접점주소와 통신 있음
-에러클리어 버튼 없애고 자동으로 실행
-경광등- 운행중(초록) 정지(주황) 에러(빨강)

 이형우 인턴님 발표
-화면 구분(사용자, 관리자)
-모델 설정
-캘리브레이션(폭 파악, 보드 넣고 돌리면 폭 나옴)
-직렬화
-명칭 잘 짓기
-변수는 겟셋
-역직렬화
-이상한 값이 나오는 것보다는 에러 발생하게 작성
-파일 시스템 와처(폴더 감시)
-. 한번만 찍기, 계속 타고 들어가지 않게
-수동조작, 초기화, 폭, 캘리브레이션, 모델선택, 접점UI, 시퀀스, 직렬화(외부데이터사용), 스메마무시, 장비속도조절
-컨베이어 여러개여도 동시에 점검구동

 박도영 연구원님 발표
-다른 자료형에 넣고 불러오기(복수접점을 담은 리스트, 리스트뷰에 넣는 함수)
-보드 정보(이름, 가로, 세로, 두께)
-var 보다는 dynamic 사용 추천
-스메마 없이도 인센서로 작동

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.3.2.목
-UDP 9일차

●
 데이터 그리드뷰 폼으로 이동
 const를 IO, 컨베이어, 폭으로 구분
 폼에서 컨베이어 아이오 폭 다 관리하는 클래스 한개
 커넥트를 샌드로 이름 변경
 세부 객체 안에 접점주소와 통신 있음
 컨베이어 객체에는 접점정보, 센서, 작동 4개만 있음
 UDP 객체 만들지 말고 락 사용(멀티스레드 문제 발생 막기)
 로그에 시간 출력
 폭 조절 지그 수리 완료
 박대녕연구원님께 질문(접점미할당, 접점중복, 뮤토콜 싱글톤)
 구조 작성(싱글톤, 스테이트)
 시퀀스(스위치, 이넘)

◆


★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★23.3.3.금
-UDP 10일차

●
 DT
 스메마

◆
 IO맵 위치 \\192.168.0.150\연구소 전용\09_PSeries\Bosch Interface Map_쇼룸장비

 장양혁 연구원님 발표
-정상적인 클라이언트 종료시

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

★
●
◆
■

레이저장비실습, 이름표

카탈로그, 프린트, 파일명규칙, 장비사용법정리, 에어컨배터리



public ActionResult WidthHome()
        {
            m_widthMotor.Home();
            return ActionResult.SUCCESS;
        }
public void Home()
        {
            if (this == null)
                return;

            m_initDone = false;

            //int direction = (m_direction == 1) ? 1 : 0;
            m_homeThread = new Thread(delegate () { HomeSequence(m_mode, m_homeDirection); });
            m_homeThread.Start();
        }
public ICommand MachineBtnCommand
        {
            get
            {
                if (_MachineBtnCommand == null)
                {
                    _MachineBtnCommand = new RelayCommand(param => this.MachineBtnClick(param),
                        null);
                }
                return _MachineBtnCommand;
            }
        }
private void MachineBtnClick(object value)
        {
            switch(value.ToString())
            {
                case "Stop":
                    MotorStop();
                    break;
                case "ServoOn":
                    ServoOnOff(true);
                    break;
                case "ServoOff":
                    ServoOnOff(false);
                    break;
                case "Home":
                    Homeing();
                    break;
                case "RelMove":
                    RelMove();
                    break;
                case "AbsMove":
                    AbsMove();
                    break;
                case "Cal":
                    Calibration();
                    break;
            }
        }
private void Homeing()
        {
            MotionBoard.getInstance().m_aMotor[m_selectedMotorIndex].m_isCalOperatioin = false;
            MotionBoard.getInstance().m_aMotor[m_selectedMotorIndex].Home();
        }
public void Home()
        {
            if (this == null)
                return;

            m_initDone = false;

            m_homeThread = new Thread(delegate () { HomeSequence(m_mode, m_homeDirection); });
            m_homeThread.Start();
        }
private void HomeSequence(int mode, int direction)
        {
            if (ActionResult.SUCCESS == HomeOperation(mode, direction))
            {
                double pos = GetPosition();
                System.Diagnostics.Debug.WriteLine("home pos = {0}", pos);
                Thread.Sleep(500);
                SetPosition(m_orgPosValue);
                Thread.Sleep(500);
                m_initDone = true;
            }
        }



X0000   CONV_WIDTH_HOME_SENSOR
X0001   CONV_WIDTH_OVER_SENSOR
★X0005   INSPECT_COMPLETE_SWICH
X0006   DOOR_INTERLOCK_SIGNAL
X0007   EMERGENCY_STOP_SIGNAL
★X0008   CONV_IN_SENSOR // 컨베이어 인 (1,2번)
★X0009   CONV_SLOW_SENSOR // 컨베이어 슬로우 (3번)
★X000A   CONV_OUT_SENSOR // 컨베이어 아웃 (4,5번)
★X000D   BOARD_AVAILABLE_N_S1_SMEMA // 앞에서 보드 보낼 준비됨 받음
★X000E   NG_BOARD_AVAILABLE_N_S1_SMEMA // 앞에서 보드 NG남 받음
★X000F   NOT_BUSY_N_P1_SMEMA // 뒤에서 보드 받을 준비됨 받음

X0028   WIDTH_SERVO_ALARM
X0029   CONV_SERVO_ALARM
★X002C   IN_SHUTTLE_OPEN_SENSOR // 셔터 열림상태
★X002D   IN_SHUTTLE_CLOSE_SENSOR // 셔터 닫힘상태



■Y0000   WIDTH_SERVO_CW 
■Y0001   WIDTH_SERVO_CCW
■Y0003   CONV_SERVO_CW
■Y0004   CONV_SERVO_CCW
★Y0007   BUZZER // 부저 울림
★Y000D   NG_BOARD_AVAILABLE_N_P1_SMEMA // 뒤에 보드 NG남 보냄
★Y000E   NOT_BUSY_N_S1_SMEMA // 앞에 보드 받을 준비됨 보냄
★Y000F   BOARD_AVAILABLE_N_P1_SMEMA // 뒤에 보드 보낼 준비됨 보냄

■Y0020   WIDTH_SERVO_ON
Y0021   WIDTH_SERVO_ALARM_RESET
■Y0022   CONV_SERVO_ON
Y0023   CONV_SERVO_ALARM_RESET
★Y0029   IN_SHUTTLE_CLOSE // 셔터 닫기



R0580   ERROR_FLAG // 에러 플래그

★R0500   WIDTH_AXIS_JOG_P // 폭조절 정방향 구동
★R0501   WIDTH_AXIS_JOG_S // 폭조절 역방향 구동
★R0502   WIDTH_RETURN_TO_ORIGIN // 폭조절 끝까지 멀어지나 끝에 반동 있음 1
R0503   WIDTH_MOVE_LOCATION_INC
★R0504   WIDTH_MOVE_LOCATION_ABS // 폭조절 끝까지 다가왔었는데 이제 멀어짐 1
R0505   WIDTH_AXIS_STOP
R0506   WIDTH_AXIS_VALUE_CHANGE_REQUEST
■R0507   WIDTH_AXIS_SERVO // 폭조절 서버 켜기
■R050D   WIDTH_POSITION_CONTROL_STEP_MOTOR
■R050E   WIDTH_POSITION_CONTROL
■R050F   WIDTH_POSITION_CONTROL_REVERSE

R0510   WIDTH_FORWARD
R0511   WIDTH_REVERSE
■R0512   WIDTH_STOP
■R0513   WIDTH_CW_MOVE_DISCHARTGE_POSITON
■R0514   WIDTH_CCW_MOVE_ENTRY_POSITON
R0515   WIDTH_CCW_MOVE_DISCHARGE_POSITION
R0516   WIDTH_CW_MOVE_ENTRY_POSITON



R0520   CONV_AXIS_JOG_P
R0521   CONV_AXIS_JOG_S
R0522   CONV_RETURN_TO_ORIGIN
R0523   CONV_MOVE_LOCATION_INC
R0524   CONV_MOVE_LOCATION_ABS
R0525   CONV_AXIS_STOP
R0526   CONV_AXIS_VALUE_CHANGE_REQUEST
■R0527   CONV_AXIS_SERVO
R052D   CONV_POSITION_CONTROL_STEP_MOTOR
R052E   CONV_POSITION_CONTROL
R052F   CONV_POSITION_CONTROL_REVERSE

■R0530   CONV_FORWARD // 컨베이어 정방향 구동
■R0531   CONV_REVERSE // 컨베이어 역방향 구동
R0532   CONV_STOP
R0533   CONV_CW_MOVE_DISCHARGE_POSITION
R0534   CONV_CCW_MOVE_ENTRY_POSITION
R0535   CONV_CCW_MOVE_DISCHARGE_POSITION
R0536   CONV_CW_MOVE_ENTRY_POSITION



환경세팅, UDP통신, 단점읽기, 단점쓰기, 복점읽기, 컨베이어구동, 좌우이동시퀀스, 클래스화, IO맵구현, 상수화, 클래스구조정리, 순서도, 시퀀스구현, 스메마, DT, 타임아웃, xml, 객체정리

수동조작, 초기화, 폭, 캘리브레이션, 모델선택, 접점UI, 시퀀스, 직렬화(외부데이터사용), 스메마무시, 장비속도조절



 완료
-데이터 그리드뷰 폼으로 이동
-const를 IO, 컨베이어, 폭으로 구분
-폼에서 컨베이어 아이오 폭 다 관리하는 클래스 한개
-커넥트를 샌드로 이름 변경
-세부 객체 안에 접점주소와 통신 있음
-컨베이어 객체에는 접점정보, 센서, 작동 4개만 있음
-UDP 객체 만들지 말고 락 사용(멀티스레드 문제 발생 막기)
-로그에 시간 출력
-폭 조절 지그 수리 완료
-박대녕연구원님께 질문(접점미할당, 접점중복, 뮤토콜 싱글톤)
-구조 작성(싱글톤, 스테이트)
-시퀀스(스위치, 이넘)

-DT
-스메마



0050800509
<01$RD 0F41 0100 7D\r"
410F 0001
16655 1
2만~

00100~ 현재값
00500~ 모터 가감속시간
00502~ 가고 싶은 위치값 저장 R0504 저장한 위치로 이동
00504~ 수동 조그 이동속도
00506~ 위치이동시 속도
00508~ 바꾸고싶은 현재 위치값 저장 R0506하면 바꿈



-DT(속도)
-스메마(스메마와 인센서 모두 작동)
-타임아웃
-폭(캘리브레이션)

-값 49를 bool로
-IO맵 필요한 정보만 최신화
-하드코딩(Const_Etc, Form, 오류메시지)
-복수접점수동읽기를 객체로 읽기

-GUI(사용자, 관리자)
-시퀀스 순서도
-클래스 다이어그램
-진행현황에 GUI 및 화면, 메뉴얼 동작 추가, 언제까지 할건지, 해낸 날짜 적기



-초기화
-수동조작
-에러클리어 버튼 없애고 자동으로 실행
-실행한 횟수 뜨게
-.없게 처리

-xml(직렬화, 역직렬화)
-모델선택
-겟프로퍼티
-파일 시스템 와처



스레드 작동여부 판단 //thread.IsAlive

 초기화(보드 사이즈에 맞게 폭 조절)
 시작(스메마, 인풋센서 대기,
인풋센서시 컨베이어,
슬로우센서시 컨베이어멈춤, 스메마, 컴플리트 대기,
컴플리트시 컨베이어,
아웃센서시 정지,
스메마시 컨베이어,
아웃센서아웃시 컨베이어멈춤, 스메마)
 정지(정지)
 보드릴리즈(풀어주기?)
 컴플리트(컨베이어)
 다음 보드 스탑(스메마)

변수
앞에서막힘
끝에서막힘
보드겹쳐옴
도중에사라짐(타임아웃)
문열림
인과 슬로우 동시에 켜짐, 동시에 여러보드 있음

상태
인풋센서 대기(스메마) > 인풋센서
컨베이어 가동 > 슬로우센서
컴플리트 대기(스메마) > 컴플리트
컴플리트 가동 > 아웃센서
스메마 대기 > 스메마
보드 배출 > 인풋센서 대기
